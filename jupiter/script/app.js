!function(t){var o={};function a(n){if(o[n])return o[n].exports;var e=o[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,a),e.l=!0,e.exports}a.m=t,a.c=o,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(e,n){if(1&n&&(e=a(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)a.d(t,o,function(n){return e[n]}.bind(null,o));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="",a(a.s="./src/js/app.js")}({"./src/js/app.js":function(module,exports,__webpack_require__){"use strict";eval('\n\n__webpack_require__(/*! ./modules/handle-hamb */ "./src/js/modules/handle-hamb.js");\n\n__webpack_require__(/*! ./modules/handle-headroom */ "./src/js/modules/handle-headroom.js");\n\n__webpack_require__(/*! ./modules/handle-lang */ "./src/js/modules/handle-lang.js");\n\n//# sourceURL=webpack:///./src/js/app.js?')},"./src/js/modules/handle-hamb.js":function(module,exports,__webpack_require__){"use strict";eval("\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var hambButton = document.querySelector('.hamb-btn'),\n      xsNav = document.querySelector('.xs-nav'),\n      header = document.querySelector('.header');\n  var handleHambClick = function handleHambClick(e) {\n    hambButton.classList.toggle('open');\n    xsNav.classList.toggle('open');\n    header.classList.toggle('xs-nav-open');\n  };\n  var handleXsNavClick = function handleXsNavClick(e) {\n    if (e.target.classList.contains('nav-link') || e.target.parentNode.classList.contains('nav-link')) {\n      // hambButton.classList.remove('open');\n      // xsNav.classList.remove('open');\n      // body.classList.remove('xs-nav-open');\n    }\n  };\n  hambButton && hambButton.addEventListener(\"click\", handleHambClick);\n  xsNav && xsNav.addEventListener(\"click\", handleXsNavClick);\n});\n\n//# sourceURL=webpack:///./src/js/modules/handle-hamb.js?")},"./src/js/modules/handle-headroom.js":function(module,exports,__webpack_require__){"use strict";eval('\n\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  var myElement = document.querySelector("header");\n  var headroom = new Headroom(myElement, {\n    // vertical offset in px before element is first unpinned\n    //offset : 96,\n    // scroll tolerance in px before state changes\n    // tolerance : 0,\n    // or scroll tolerance per direction\n    tolerance: {\n      down: 0,\n      up: 10\n    },\n    // element which is source of scroll events. Defaults to window\n    //scroller : element,\n    // css classes to apply\n    classes: {\n      // when element is initialised\n      initial: "headroom",\n      // when scrolling up\n      pinned: "headroom--pinned",\n      // when scrolling down\n      unpinned: "headroom--unpinned",\n      // when above offset\n      top: "headroom--top",\n      // when below offset\n      notTop: "headroom--not-top",\n      // when at bottom of scoll area\n      bottom: "headroom--bottom",\n      // when not at bottom of scroll area\n      notBottom: "headroom--not-bottom"\n    },\n    onUnpin: function onUnpin() {\n      if (isXsNavOpen(myElement)) {\n        this.elem.classList.remove(this.classes.unpinned);\n        this.elem.classList.add(this.classes.pinned);\n      } else {\n        this.elem.classList.add(this.classes.unpinned);\n        this.elem.classList.remove(this.classes.pinned);\n      }\n    }\n    // // callback when pinned, `this` is headroom object\n    // onPin : function() {},\n    // // callback when unpinned, `this` is headroom object\n    // onUnpin : function() {},\n    // // callback when above offset, `this` is headroom object\n    // onTop : function() {},\n    // // callback when below offset, `this` is headroom object\n    // onNotTop : function() {}\n    // // callback at bottom of page, `this` is headroom object\n    // onBottom : function() {},\n    // // callback when moving away from bottom of page, `this` is headroom object\n    // onNotBottom : function() {}\n  });\n  headroom.init();\n  function isXsNavOpen(el) {\n    return el.classList.contains(\'xs-nav-open\');\n  }\n});\n\n//# sourceURL=webpack:///./src/js/modules/handle-headroom.js?')},"./src/js/modules/handle-lang.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  var langBtns = document.querySelectorAll(".lang-link");\n\n  langBtns && langBtns.length > 0 && [].concat(_toConsumableArray(langBtns)).map(function (item) {\n    return item.addEventListener("click", changeLang);\n  });\n\n  function changeLang(e) {\n    //[...langBtns].filter( (item) => (item.classList.contains("active")) ).map( (item) => (item.classList.remove("active")) );\n    [].concat(_toConsumableArray(langBtns)).map(function (item) {\n      return item.classList.contains("active") ? item.classList.remove("active") : null;\n    });\n    //this.classList.add("active");  \n    e.target.classList.add("active");\n  }\n});\n\n//# sourceURL=webpack:///./src/js/modules/handle-lang.js?')}});