!function(t){var o={};function s(e){if(o[e])return o[e].exports;var n=o[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=o,s.d=function(e,n,t){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)s.d(t,o,function(e){return n[e]}.bind(null,o));return t},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="",s(s.s="./src/js/app.js")}({"./src/js/app.js":function(module,exports,__webpack_require__){"use strict";eval('\n\n__webpack_require__(/*! ./modules/handle-hamb */ "./src/js/modules/handle-hamb.js");\n\n__webpack_require__(/*! ./modules/handle-headroom */ "./src/js/modules/handle-headroom.js");\n\n__webpack_require__(/*! ./modules/handle-dropdown-menu */ "./src/js/modules/handle-dropdown-menu.js");\n\n__webpack_require__(/*! ./modules/handle-modals */ "./src/js/modules/handle-modals.js");\n\n//# sourceURL=webpack:///./src/js/app.js?')},"./src/js/modules/handle-dropdown-menu.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n\n  // const  dropdownMenuBtns = document.querySelectorAll(\'.js-drop-menu .js-menu-btn\');  \n  // dropdownMenuBtns&&[...dropdownMenuBtns].map( ( item ) => { item.addEventListener( "click", function(e){    \n  //   let clickeddropdownMenu = this.closest(".js-drop-menu");\n  //   let openeddropdownMenu = document.querySelector(\'.js-drop-menu.isOpen\');    \n  //   openeddropdownMenu&&openeddropdownMenu.classList.remove("isOpen");\n  //   (clickeddropdownMenu!==openeddropdownMenu)&&clickeddropdownMenu.classList.add("isOpen");       \n  // })} )\n\n  // init dropdown Menu from data-selected="XXXXX" \n  var dropdownMenu = document.querySelectorAll(\'.js-drop-menu\');\n  dropdownMenu && [].concat(_toConsumableArray(dropdownMenu)).map(function (item) {\n    var selected = item.dataset.initial || "not-selected";\n    console.log(selected);\n    var hideninput = item.querySelector(\'input\');\n    if (hideninput) {\n      hideninput.value = selected;\n    }\n    var itemBtnText = item.querySelector(\'.js-menu-btn span\');\n    if (itemBtnText) {\n      itemBtnText.textContent = selected;\n    }\n    // let options = item.querySelectorAll(\'.js-menu-item\');\n    // let activeOption=options&&[...options].filter((item)=>((item.dataset.option||"not-set")===selected));    \n    // if(activeOption && (activeOption.length > 0)){      \n    //   activeOption[0].classList.add("active");\n    // }\n    //better to use selectors\n    // dropdown class active\n    var activeOption = item.querySelector(\'.js-menu-item[data-option=\\\'\' + selected + \'\\\']\');\n    activeOption && activeOption.classList.add("active");\n\n    // dropdown with modal apply class active\n    var activeModOption = item.querySelector(\'.js-mod-menu-item[data-option=\\\'\' + selected + \'\\\']\');\n    activeModOption && activeModOption.classList.add("active");\n  });\n\n  var universalOneClickListener = function universalOneClickListener(event) {\n    var openeddropdownMenu = document.querySelector(\'.js-drop-menu.isOpen\');\n    var targetMenu = event.target.closest(".js-drop-menu");\n    var targetItem = event.target.closest(".js-menu-item");\n\n    if (targetItem !== null) {\n      var activeItem = targetItem.closest(".drop-menu-list").querySelector(\'.js-menu-item.active\');\n      targetItem !== activeItem && activeItem && activeItem.classList.remove("active");\n      targetItem.classList.add("active");\n      var selected = targetItem.dataset.option || "not-selected";\n      var itemBtnText = targetMenu.querySelector(\'.js-menu-btn span\');\n      if (itemBtnText) {\n        itemBtnText.textContent = selected;\n      }\n      var hideninput = targetMenu.querySelector(\'input\');\n      if (hideninput) {\n        hideninput.value = selected;\n      }\n    }\n\n    if (targetMenu !== null) {\n      if (openeddropdownMenu === targetMenu) {\n        targetMenu.classList.remove("isOpen");\n      } else {\n        openeddropdownMenu && openeddropdownMenu.classList.remove("isOpen");\n        targetMenu.classList.add("isOpen");\n      }\n    } else {\n      openeddropdownMenu && openeddropdownMenu.classList.remove("isOpen");\n    }\n  };\n  document.addEventListener(\'click\', universalOneClickListener);\n});\n\n//# sourceURL=webpack:///./src/js/modules/handle-dropdown-menu.js?')},"./src/js/modules/handle-hamb.js":function(module,exports,__webpack_require__){"use strict";eval("\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var hambButton = document.querySelector('.hamb-btn'),\n      xsNav = document.querySelector('.xs-nav'),\n      header = document.querySelector('.header');\n  var handleHambClick = function handleHambClick(e) {\n    hambButton.classList.toggle('open');\n    xsNav.classList.toggle('open');\n    header.classList.toggle('xs-nav-open');\n    // document.body.classList.toggle('overflow-hidden');\n  };\n  // const handleXsNavClick = (e)=> {    \n  //   if ( e.target.classList.contains('nav-link') || e.target.parentNode.classList.contains('nav-link') ) {\n  //     hambButton.classList.remove('open');\n  //     xsNav.classList.remove('open');\n  //     header.classList.remove('xs-nav-open');           \n  //   }\n  // }\n  hambButton && hambButton.addEventListener(\"click\", handleHambClick);\n  // xsNav&&xsNav.addEventListener(\"click\", handleXsNavClick);\n});\n\n//# sourceURL=webpack:///./src/js/modules/handle-hamb.js?")},"./src/js/modules/handle-headroom.js":function(module,exports,__webpack_require__){"use strict";eval('\n\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  var myElement = document.querySelector("header");\n  var headroom;\n  function isXsNavOpen(el) {\n    return el.classList.contains(\'xs-nav-open\');\n  }\n  if (myElement) {\n    headroom = new Headroom(myElement, {\n      // vertical offset in px before element is first unpinned\n      //offset : 96,\n      // scroll tolerance in px before state changes\n      // tolerance : 0,\n      // or scroll tolerance per direction\n      tolerance: {\n        down: 0,\n        up: 10\n      },\n      // element which is source of scroll events. Defaults to window\n      //scroller : element,\n      // css classes to apply\n      classes: {\n        // when element is initialised\n        initial: "headroom",\n        // when scrolling up\n        pinned: "headroom--pinned",\n        // when scrolling down\n        unpinned: "headroom--unpinned",\n        // when above offset\n        top: "headroom--top",\n        // when below offset\n        notTop: "headroom--not-top",\n        // when at bottom of scoll area\n        bottom: "headroom--bottom",\n        // when not at bottom of scroll area\n        notBottom: "headroom--not-bottom"\n      }\n      // onUnpin: function() {\n      //   if ( (window.innerWidth < 1200) && isXsNavOpen(myElement) ) {\n      //     this.elem.classList.remove(this.classes.unpinned);\n      //     this.elem.classList.add(this.classes.pinned);\n      //   }\n      //   // else {\n      //   //   this.elem.classList.add(this.classes.unpinned);\n      //   //   this.elem.classList.remove(this.classes.pinned);\n      //   // }                       \n      // },\n      // // callback when pinned, `this` is headroom object\n      // onPin : function() {},\n      // // callback when unpinned, `this` is headroom object\n      // onUnpin : function() {},\n      // // callback when above offset, `this` is headroom object\n      // onTop : function() {},\n      // // callback when below offset, `this` is headroom object\n      // onNotTop : function() {}\n      // // callback at bottom of page, `this` is headroom object\n      // onBottom : function() {},\n      // // callback when moving away from bottom of page, `this` is headroom object\n      // onNotBottom : function() {}\n    });\n    headroom.init();\n  }\n});\n\n//# sourceURL=webpack:///./src/js/modules/handle-headroom.js?')},"./src/js/modules/handle-modals.js":function(module,exports,__webpack_require__){"use strict";eval("\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var isModalOnPage = document.getElementById(\"modal\");\n  if (isModalOnPage) {\n    var vanillaModal = new VanillaModal.default({\n      modal: '.modal',\n      modalInner: '.modal-inner',\n      modalContent: '.modal-content',\n      open: '[data-modal-open]',\n      close: '[data-modal-close]',\n      page: 'body',\n      loadClass: 'vanilla-modal',\n      class: 'modal-visible',\n      clickOutside: true,\n      closeKeys: [27],\n      transitions: true,\n      onBeforeOpen: null,\n      onBeforeClose: null,\n      onOpen: null,\n      onClose: null\n    });\n  }\n});\n\n//# sourceURL=webpack:///./src/js/modules/handle-modals.js?")}});