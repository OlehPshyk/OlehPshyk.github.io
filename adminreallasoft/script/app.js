!function(o){var t={};function s(e){if(t[e])return t[e].exports;var n=t[e]={i:e,l:!1,exports:{}};return o[e].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=o,s.c=t,s.d=function(e,n,o){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(s.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var t in n)s.d(o,t,function(e){return n[e]}.bind(null,t));return o},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="",s(s.s="./src/js/app.js")}({"./src/js/app.js":function(module,exports,__webpack_require__){"use strict";eval('\n\n__webpack_require__(/*! ./modules/handle-hamb */ "./src/js/modules/handle-hamb.js");\n\n__webpack_require__(/*! ./modules/handle-headroom */ "./src/js/modules/handle-headroom.js");\n\n__webpack_require__(/*! ./modules/handle-dropdown-menu */ "./src/js/modules/handle-dropdown-menu.js");\n\n//# sourceURL=webpack:///./src/js/app.js?')},"./src/js/modules/handle-dropdown-menu.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  var dropdownMenues = document.querySelectorAll(\'.js-drop-menu .js-menu-btn\');\n  console.log(dropdownMenues);\n\n  dropdownMenues && [].concat(_toConsumableArray(dropdownMenues)).map(function (item) {\n    item.addEventListener("click", function (e) {\n      var clickeddropdownMenu = this.closest(".js-drop-menu");\n      var openeddropdownMenu = document.querySelector(\'.js-drop-menu.isOpen\');\n      openeddropdownMenu && openeddropdownMenu.classList.remove("isOpen");\n      clickeddropdownMenu !== openeddropdownMenu && clickeddropdownMenu.classList.add("isOpen");\n    });\n  });\n\n  var outsideClickListener = function outsideClickListener(event) {\n    var openeddropdownMenu = document.querySelector(\'.js-drop-menu.isOpen\');\n    event.target.closest(".js-drop-menu") === null && openeddropdownMenu && openeddropdownMenu.classList.remove("isOpen");\n  };\n  document.addEventListener(\'click\', outsideClickListener);\n});\n\n//# sourceURL=webpack:///./src/js/modules/handle-dropdown-menu.js?')},"./src/js/modules/handle-hamb.js":function(module,exports,__webpack_require__){"use strict";eval("\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var hambButton = document.querySelector('.hamb-btn'),\n      xsNav = document.querySelector('.xs-nav'),\n      header = document.querySelector('.header');\n  var handleHambClick = function handleHambClick(e) {\n    hambButton.classList.toggle('open');\n    xsNav.classList.toggle('open');\n    header.classList.toggle('xs-nav-open');\n    // document.body.classList.toggle('overflow-hidden');\n  };\n  // const handleXsNavClick = (e)=> {    \n  //   if ( e.target.classList.contains('nav-link') || e.target.parentNode.classList.contains('nav-link') ) {\n  //     hambButton.classList.remove('open');\n  //     xsNav.classList.remove('open');\n  //     header.classList.remove('xs-nav-open');           \n  //   }\n  // }\n  hambButton && hambButton.addEventListener(\"click\", handleHambClick);\n  // xsNav&&xsNav.addEventListener(\"click\", handleXsNavClick);\n});\n\n//# sourceURL=webpack:///./src/js/modules/handle-hamb.js?")},"./src/js/modules/handle-headroom.js":function(module,exports,__webpack_require__){"use strict";eval('\n\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  var myElement = document.querySelector("header");\n  var headroom;\n  function isXsNavOpen(el) {\n    return el.classList.contains(\'xs-nav-open\');\n  }\n  if (myElement) {\n    headroom = new Headroom(myElement, {\n      // vertical offset in px before element is first unpinned\n      //offset : 96,\n      // scroll tolerance in px before state changes\n      // tolerance : 0,\n      // or scroll tolerance per direction\n      tolerance: {\n        down: 0,\n        up: 10\n      },\n      // element which is source of scroll events. Defaults to window\n      //scroller : element,\n      // css classes to apply\n      classes: {\n        // when element is initialised\n        initial: "headroom",\n        // when scrolling up\n        pinned: "headroom--pinned",\n        // when scrolling down\n        unpinned: "headroom--unpinned",\n        // when above offset\n        top: "headroom--top",\n        // when below offset\n        notTop: "headroom--not-top",\n        // when at bottom of scoll area\n        bottom: "headroom--bottom",\n        // when not at bottom of scroll area\n        notBottom: "headroom--not-bottom"\n      }\n      // onUnpin: function() {\n      //   if ( (window.innerWidth < 1200) && isXsNavOpen(myElement) ) {\n      //     this.elem.classList.remove(this.classes.unpinned);\n      //     this.elem.classList.add(this.classes.pinned);\n      //   }\n      //   // else {\n      //   //   this.elem.classList.add(this.classes.unpinned);\n      //   //   this.elem.classList.remove(this.classes.pinned);\n      //   // }                       \n      // },\n      // // callback when pinned, `this` is headroom object\n      // onPin : function() {},\n      // // callback when unpinned, `this` is headroom object\n      // onUnpin : function() {},\n      // // callback when above offset, `this` is headroom object\n      // onTop : function() {},\n      // // callback when below offset, `this` is headroom object\n      // onNotTop : function() {}\n      // // callback at bottom of page, `this` is headroom object\n      // onBottom : function() {},\n      // // callback when moving away from bottom of page, `this` is headroom object\n      // onNotBottom : function() {}\n    });\n    headroom.init();\n  }\n});\n\n//# sourceURL=webpack:///./src/js/modules/handle-headroom.js?')}});